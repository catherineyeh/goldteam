1.  Which register number is used for the global pointer (gp) in OS/161?
      28
2.  What bus/busses does OS/161 support?
      LAMEbus
3.  What is the difference between splhigh and spl0?
      splhigh takes no arguments and sets the priority level to the highest
      possible level, which disables all interrupts. spl0 takes one argument and
      sets the priority level to that argument, which enables the interrupts
      that that argument represents.
4.  Why do we use typedef u_int32_t instead of saying int?
      The size of an int datatype varies depending on the machine. u_int32_t
      allows us to have a constant size on all machines.
5.  What does splx return?
      splx returns the old interrupt state.
6.  What is the highest interrupt level?
      OS161 doesn't support interrupts, it just has a function splhigh() 
      which sets the priority level to the highest level, disabling
      all other interrupts.
7.  How frequently are hardclock interrupts generated?
      100 times per second
8.  What functions comprise the standard interface to a VFS device?
      vfs_setcurdir, vfs_clearcurdir, vfs_getcurdir, vfs_sync, vfs_getroot,
      vfs_getdevname, vfs_lookup, vfs_lookparent, vfs_open, vfs_close,
      vfs_readlink, vfs_symlink, vfs_mkdir, vfs_link, vfs_remove, vfs_rmdir,
      vfs_rename, vfs_chdir, vfs_getcwd, vfs_bootstrap, vfs_initbootfs,
      vfs_setbootfs, vfs_clearbootfs, vfs_adddev, vfs_addfs, vfs_mount,
      vfs_unmount, and vfs_unmountall
9.  How many characters are allowed in a volume name?
      32
10. What is the block size of SFS?
      512 bytes
11. What is the standard interface to a file system (i.e., what functions must
    you implement to implement a new file system)?
12. What function puts a thread to sleep?
      thread_sleep
13. How large are OS/161 file offsets?
      4
14. What operations can you do on a vnode?
      emufs_loadvnode, emufs_open, emufs_opendir, emufs_close, emufs_reclaim,
      emufs_read, emufs_getdirentry, emufs_write, emufs_ioctl, emufs_stat,
      emufs_file_gettype, emufs_dir_gettype, emufs_tryseek, emufs_fsync,
      emufs_truncate, emufs_creat, emufs_lookup, emufs_lookparent,
      emufs_namefile
15. What is the maximum filename length in OS/161?
      60
16. What is the system call number for a write?
      6
17. Where is STDIN_FILENO defined?
      kern/include/kern/unistd.h:23
18. Is it OK to initialize the thread system before the scheduler? Why (not)?
      It's not OK to initialize the thread system before the scheduler because
      the schedulers handles how threads get setup and how they run.
19. What is a zombie?
      A zombie is a dead thread that needs to be disposed of.
20. How large is the initial run queue?
      32
21. What does a device name in OS/161 look like?
      "lhd0"; it is always a valid string
22. What does a raw device name in OS/161 look like?
      "lhd0raw"; it is non-NULL iff the device can have a filesystem mounted on
      it
23. What lock protects the vnode reference count?
      lock *vn_countlock
24. What device types are currently supported?
      OS161 supports devices just like freeBSD does, so it supports most
      devices just like freeBSD does.

When a user calls a system call from libc, how does control get transferred to
the kernel. What functions are called before the kernel version of your system
call is invoked? How is control returned back to the user? Give a detailed
explanation citing source files and code.

os161-1.11/kern/arch/mips/mips/syscalls.c handles system calls initially and
calls functions that are in that same file.

os161-1.11/lib/libc/syscalls.S puts the system call numbers into the correct
registers
